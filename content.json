{"meta":{"title":"Ebby's Notes","subtitle":"=Blog for AI Learning=","description":"记录人工智能学习路径","author":"Ebby DD","url":"http://blog.a-stack.com"},"pages":[{"title":"404-找不到页面","date":"2016-09-03T09:17:18.000Z","updated":"2018-05-15T14:59:56.000Z","comments":false,"path":"404.html","permalink":"http://blog.a-stack.com/404.html","excerpt":"","text":"404 Not Found对不起，您所访问的页面不存在或者已删除 你可以点击此处返回首页.我的Github：https://github.com/ddebby或者给我发邮件：ebby.dd@gmail.com ​ 因为期待得太苦，会导致得到的时候分外甜"}],"posts":[{"title":"Git使用总结","slug":"读书笔记-Pro-Git","date":"2017-02-02T04:45:13.000Z","updated":"2019-06-10T08:40:09.000Z","comments":false,"path":"2017/02/02/读书笔记-Pro-Git/","link":"","permalink":"http://blog.a-stack.com/2017/02/02/读书笔记-Pro-Git/","excerpt":"一直在用Git作为代码版本控制工具，一般都是现查现用，难得把一本专门介绍git的书从头读到尾。做个笔记，记录以下新Get到的一些技能，以备以后快速查看。","text":"一直在用Git作为代码版本控制工具，一般都是现查现用，难得把一本专门介绍git的书从头读到尾。做个笔记，记录以下新Get到的一些技能，以备以后快速查看。 写在前面​ 《Pro Git》由GitHub员工Scott Chacon和另一位爱好者Ben Straub共同编写，主要介绍了Git使用基础和原理，适合Git爱好者和初学者参考。 The entire Pro Git book, written by Scott Chacon and Ben Straub and published by Apress, is available here. All content is licensed under the Creative Commons Attribution Non Commercial Share Alike 3.0 license. Print versions of the book are available on Amazon.com. 可通过如下地址获取（另外本文末尾提供了不同格式下载的地址）： 官网：http://git-scm.com/book/en/v2（第二版） 中文翻译：https://git-scm.com/book/zh/v2（第二版）​ Take a Note for Reading 这次笔记整理我将以2014年的第二版英文版为基础，记录这个过程中所获得的新的技能点。 同类工具 Subversion Perforce Bazaar Git特点 数据存储方式—-》a stream of snapshots 离线处理和编辑 Checksum 算法：SHA-1 hash 0. 环境配置 Git全局配置文件的改写通过添加--global实现Git的配置文件（此处仅针对某个repo）位置为.git/config 基本信息配置 1234567$ git config --global user.name \"John Doe\"$ git config --global user.email johndoe@example.com$ git config --global pull.rebase true$ git config --global core.editor emacs$ git config --global color.ui true# Windows环境下，编辑器的配置如下$ git config --global core.editor \"'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst 配置完成之后，可以通过如下命令检查配置情况： 1$ git config --list 别名设置 123$ git config --global alias.unstage 'reset HEAD --'$ git config --global alias.last 'log -1 HEAD'... .gitconfig文件配置 12345678910111213141516171819# 别名配置[alias] co = checkout ci = commit st = status sh = stash sa = stash apply sp = stash pop ap = add -p br = branch cp = checkout -p cv = commit -v dc = diff --cached d = diff pr = pull --rebase ps = push l = log --graph --pretty=format:'%C(yellow)%h%Creset %C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit --date=short --all lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit --all 1. Git基础​ 下图描述了git处理文件的生命周期 关于.gitignore文件​ 文件 .gitignore 的格式规范如下： 所有空行或者以 ＃ 开头的行都会被 Git 忽略。 可以使用标准的 glob 模式匹配。 匹配模式可以以/开头防止递归。 匹配模式可以以/结尾指定目录。 要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号!取反。 所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。 星号*匹配零个或多个任意字符；[abc] 匹配任何一个列在方括号中的字符（这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）；问号?只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如[0-9]表示匹配所有 0 到 9 的数字）。 使用两个星号** 表示匹配任意中间目录，比如a/**/z 可以匹配 a/z, a/b/z 或 a/b/c/z等。更多内容请参考：https://github.com/github/gitignore ​ 举个🌰[栗子]：1234567891011121314151617# no .a files*.a# but do track lib.a, even though you're ignoring .a files above!lib.a# only ignore the TODO file in the current directory, not subdir/TODO/TODO# ignore all files in the build/ directorybuild/# ignore doc/notes.txt, but not doc/server/arch.txtdoc/*.txt# ignore all .pdf files in the doc/ directorydoc/**/*.pdf git rm​ 我们想把文件从 Git 仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中。 换句话说，你想让文件保留在磁盘，但是并不想让 Git 继续跟踪。 当你忘记添加 .gitignore 文件，不小心把一个很大的日志文件或一堆 .a这样的编译生成文件添加到暂存区时，这一做法尤其有用。 为达到这一目的，使用—cached 选项：1$ git rm --cached README ​ git rm命令后面可以列出文件或者目录的名字，也可以使用 glob 模式。 比方说：1$ git rm log/*.log ​ 注意到星号 * 之前的反斜杠\\， 因为 Git 有它自己的文件模式扩展匹配方式，所以我们不用 shell 来帮忙展开。 此命令删除 log/ 目录下扩展名为 .log 的所有文件。 类似的比如：1$ git rm *~ ​ 该命令为删除以 ~ 结尾的所有文件。 git log​ git log 有许多选项可以帮助你搜寻你所要找的提交。 一个常用的选项是-p，用来显示每次提交的内容差异。 你也可以加上-2 来仅显示最近两次提交： 1$ git log -p -2 如果你想看到每次提交的简略的统计信息，你可以使用 —stat 选项： 123456789101112131415161718EbbyMandeMBP:blog 520XM$ git log --statcommit 1a158fd41bece4caed80210526e8700dae73a527Author: ddebby &lt;ebby.dd@gmail.com&gt;Date: Thu Feb 2 19:02:31 2017 +0800 新增两篇读书笔记 Signed-off-by: ddebby &lt;ebby.dd@gmail.com&gt; ...344\\271\\246\\347\\254\\224\\350\\256\\260-Pro-Git.md\" | 79 +++++++++++++++++++++ ...56\\260-\\350\\205\\276\\350\\256\\257\\344\\274\\240.md\" | 65 +++++++++++++++++ source/images/blog/Pro Git Version 2.jpg | Bin 0 -&gt; 134581 bytes source/images/blog/pro-git-cover.jpeg | Bin 0 -&gt; 21289 bytes ...56\\257\\344\\274\\240\\345\\260\\201\\351\\235\\242.jpg\" | Bin 0 -&gt; 12898 bytes ...0\\206-\\350\\205\\276\\350\\256\\257\\344\\274\\240.PNG\" | Bin 0 -&gt; 24520 bytes themes/next/source/css/_custom/custom.styl | 3 +- themes/next/source/css/_variables/custom.styl | 12 ++-- 8 files changed, 152 insertions(+), 7 deletions(-) 还可以给出若干搜索条件，列出符合的提交。 用 --author 选项显示指定作者的提交，用 --grep 选项搜索提交说明中的关键字。 （请注意，如果要得到同时满足这两个选项搜索条件的提交，就必须用 --all-match选项。否则，满足任意一个条件的提交都会被匹配出来） 另一个非常有用的筛选选项是 -S，可以列出那些添加或移除了某些字符串的提交。 比如说，你想找出添加或移除了某一个特定函数的引用的提交，你可以这样使用： 1$ git log -S function_name 最后一个很实用的 git log 选项是路径（path）， 如果只关心某些文件或者目录的历史提交，可以在 git log 选项的最后指定它们的路径。 因为是放在最后位置上的选项，所以用两个短划线（—）隔开之前的选项和后面限定的路径名。 选项 说明 -(n) 仅显示最近的 n 条提交 —since, —after 仅显示指定时间之后的提交。 —until, —before 仅显示指定时间之前的提交。 —author 仅显示指定作者相关的提交。 —committer 仅显示指定提交者相关的提交。 —grep 仅显示含指定关键字的提交 -S 仅显示添加或移除了某个关键字的提交 git diff Git 提供了一种比较便捷的方式：三点语法。 对于 diff 命令来说，你可以通过把 ... 置于另一个分支名后来对该分支的最新提交与两个分支的共同祖先进行比较： 1$ git diff master...contrib 该命令仅会显示自当前特性分支与 master 分支的共同祖先起，该分支中的工作。 这个语法很有用，应该牢记。 远程仓库添加远程仓库​ 我在之前的章节中已经提到并展示了如何添加远程仓库的示例，不过这里将告诉你如何明确地做到这一点。 运行 git remote add &lt;shortname&gt; &lt;url&gt; 添加一个新的远程 Git 仓库。从远程仓库中抓取与拉取​ 如果你想拉取远程仓库中有但你没有的信息，可以运行：1$ git fetch [remote-name] ​ 必须注意 git fetch 命令会将数据拉取到你的本地仓库 - 它并不会自动合并或修改你当前的工作。 当准备好时你必须手动将其合并入你的工作。 标签附注标签在 Git 中创建一个附注标签是很简单的。 最简单的方式是当你在运行 tag 命令时指定-a 选项：123456$ git tag -a v1.4 -m 'my version 1.4'$ git tagv0.1v1.3v1.4 ​ -m选项指定了一条将会存储在标签中的信息。 如果没有为附注标签指定一条信息，Git 会运行编辑器要求你输入信息。 后期打标签​ 要在那个提交上打标签，你需要在命令的末尾指定提交的校验和（或部分校验和）:1$ git tag -a v1.2 9fceb02 共享标签​ 默认情况下，git push 命令并不会传送标签到远程仓库服务器上。 在创建完标签后你必须显式地推送标签到共享服务器上。 这个过程就像共享远程分支一样 - 你可以运行123$ git push origin [tagname] # or$ git push origin --tags 检出标签​ 在 Git 中你并不能真的检出一个标签，因为它们并不能像分支一样来回移动。 如果你想要工作目录与仓库中特定的标签版本完全一样，可以使用 git checkout -b [branchname][tagname]在特定的标签上创建一个新分支：12$ git checkout -b version2 v2.0.0Switched to a new branch 'version2' 分支管理 git branch​ 如果需要查看每一个分支的最后一次提交，可以运行 git branch -v命令：123$ git branch -v* dev 1a158fd 新增两篇读书笔记 master f8f05fb Accept Merge Request #1 Merge Resource branch to Master branch : (resource -&gt; master) ​ —merged 与 --no-merged 这两个有用的选项可以过滤这个列表中已经合并或尚未合并到当前分支的分支。 如果要查看哪些分支已经合并到当前分支，可以运行：123$ git branch --merged iss53* master ​ 因为之前已经合并了 iss53 分支，所以现在看到它在列表中。 在这个列表中分支名字前没有 * 号的分支通常可以使用 git branch -d 删除掉；你已经将它们的工作整合到了另一个分支，所以并不会失去任何东西。​ 查看所有包含未合并工作的分支，可以运行：12$ git branch --no-merged testing ​ 这里显示了其他分支。 未被合并的分支默认是无法被删除，不过可以通过git branch -D &lt;branch_name&gt;来强制删除。 拉取远程分支： 1$ git checkout -b [branch] [remotename]/[branch] 如果想要查看设置的所有跟踪分支，可以使用 git branch 的 -vv 选项。 这会将所有的本地分支列出来并且包含更多的信息，如每一个分支正在跟踪哪个远程分支与本地分支是否是领先、落后或是都有。 12345$ git branch -vv iss53 7e424c3 [origin/iss53: ahead 2] forgot the brackets master 1ae2a45 [origin/master] deploying index fix* serverfix f8674d9 [teamone/server-fix-good: ahead 3, behind 1] this should do it testing 5ea463a trying something new 删除远程服务器的分支 123$ git push origin --delete serverfixTo https://github.com/schacon/simplegit - [deleted] serverfix git merge与git rebase 总的原则是，只对尚未推送或分享给别人的本地修改执行变基操作清理历史，从不对已推送至别处的提交执行变基操作，这样，你才能享受到两种方式带来的便利。详情参考：https://git-scm.com/book/zh/v2/Git-分支-变基 将当前分支推送为远程新分支 1git push origin local_branch:remote_branch git stash储藏与清理 在一个分支上做了一些修改，在不想commit的情况下，切换分支，需要将修改的内容存储起来，使用如下命令： 12345git stash | git stash savegit stash listgit stash apply# 移除某个stach内容git stach drop stach@&#123;0&#125; 2. Git 服务器 生成裸仓库​在开始架设 Git 服务器前，需要把现有仓库导出为裸仓库——即一个不包含当前工作目录的仓库。 这通常是很简单的。 为了通过克隆你的仓库来创建一个新的裸仓库，你需要在克隆命令后加上 --bare选项 按照惯例，裸仓库目录名以 .git 结尾，就像这样：123$ git clone --bare my_project my_project.gitCloning into bare repository 'my_project.git'...done. 现在，你的 my_project.git 目录中应该有 Git 目录的副本了。 把裸仓库放到服务器上只需要将上述my_project.git复制到某个目录下即可通过如下命令访问：1$ git clone user@git.example.com:/opt/git/my_project.git ​ 如果到该项目目录中运行 git init 命令，并加上 --shared选项，那么 Git 会自动修改该仓库目录的组权限为可写。123$ ssh user@git.example.com$ cd /opt/git/my_project.git$ git init --bare --shared 基于以上简单配置的简单权限管理策略： 主机上建立一个 git 账户，让每个需要写权限的人发送一个 SSH 公钥，然后将其加入 git 账户的 ~/.ssh/authorized_keys 文件。 这样一来，所有人都将通过 git 账户访问主机。 这一点也不会影响提交的数据——访问主机用的身份不会影响提交对象的提交者信息。 另一个办法是让 SSH 服务器通过某个 LDAP 服务，或者其他已经设定好的集中授权机制，来进行授权。 只要每个用户可以获得主机的 shell 访问权限，任何 SSH 授权机制你都可视为是有效的。 维护项目使用format-patch生成补丁 适用于邮件通知项目管理者合并补丁内容 使用 apply 命令应用补丁 ​ 如果你收到了一个使用 git diff 或 Unix diff 命令（不推荐使用这种方式，具体见下一节）创建的补丁，可以使用 git apply 命令来应用。 假设你将补丁保存在了 /tmp/patch-ruby-client.patch 中，可以这样应用补丁： 1$ git apply /tmp/patch-ruby-client.patch 这会修改工作目录中的文件。 它与运行 patch -p1 命令来应用补丁几乎是等效的，但是这种方式更加严格，相对于 patch 来说，它能够接受的模糊匹配更少。 在实际应用补丁前，你还可以使用 git apply 来检查补丁是否可以顺利应用——即对补丁运行 git apply --check 命令： 123$ git apply --check 0001-seeing-if-this-helps-the-gem.patcherror: patch failed: ticgit.gemspec:1error: ticgit.gemspec: patch does not apply 如果没有产生输出，则该补丁可以顺利应用。 如果检查失败了，该命令还会以一个非零的状态退出，所以需要时你也可以在脚本中使用它。 准备一次发布现在你可以发布一个构建了。 其中一件事情就是为那些不使用 Git 的可怜包们创建一个最新的快照归档。 使用 git archive 命令完成此工作： 123$ git archive master --prefix='project/' | gzip &gt; `git describe master`.tar.gz$ ls *.tar.gzv1.6.2-rc1-20-g8c5b85c.tar.gz 如果有人将这个压缩包解压，他就可以得到你的项目文件夹的最新快照。 你也可以以类似的方式创建一个 zip 压缩包，但此时你应该向 git archive 命令传递 --format=zip 选项： 1$ git archive master --prefix='project/' --format=zip &gt; `git describe master`.zip 现在你有了本次发布的一个 tar 包和一个 zip 包，可以将其上传到网站或以电子邮件的形式发送给人们。 制作提交简报现在是时候通知邮件列表里那些好奇你的项目发生了什么的人了。 使用 git shortlog 命令可以快速生成一份包含从上次发布之后项目新增内容的修改日志（changelog）类文档。 它会对你给定范围内的所有提交进行总结；比如，你的上一次发布名称是 v1.0.1，那么下面的命令可以给出上次发布以来所有提交的总结： 1234567891011121314$ git shortlog --no-merges master --not v1.0.1Chris Wanstrath (8): Add support for annotated tags to Grit::Tag Add packed-refs annotated tag support. Add Grit::Commit#to_patch Update version and History.txt Remove stray `puts` Make ls_tree ignore nilsTom Preston-Werner (4): fix dates in history dynamic version method Version bump to 1.0.2 Regenerated gemspec for version 1.0.2 这份整洁的总结包括了自 v1.0.1 以来的所有提交，并且已经按照作者分好组，你可以通过电子邮件将其直接发送到列表中。 Git工具双点最常用的指明提交区间语法是双点。 这种语法可以让 Git 选出在一个分支中而不在另一个分支中的提交。你想要查看 experiment 分支中还有哪些提交尚未被合并入 master 分支。 你可以使用 master..experiment 来让 Git 显示这些提交。也就是 “在 experiment 分支中而不在 master 分支中的提交”： 1$ git log master..experiment 反过来，如果你想查看在 master 分支中而不在 experiment 分支中的提交，你只要交换分支名即可。experiment..master 会显示在 master 分支中而不在 experiment 分支中的提交： 1$ git log experiment..master 这可以让你保持 experiment 分支跟随最新的进度以及查看你即将合并的内容。 另一个常用的场景是查看你即将推送到远端的内容： 1$ git log origin/master..HEAD 这个命令会输出在你当前分支中而不在远程 origin 中的提交。 如果你执行了 git push 并且你的当前分支正在跟踪 origin/master，git log origin/master..HEAD 所输出的提交将会被传输到远端服务器。 如果你留空了其中的一边， Git 会默认为 HEAD。 例如， git log origin/master.. 将会输出与之前例子相同的结果 —— Git 使用 HEAD 来代替留空的一边。 多点双点语法很好用，但有时候你可能需要两个以上的分支才能确定你所需要的修订，比如查看哪些提交是被包含在某些分支中的一个，但是不在你当前的分支上。 Git 允许你在任意引用前加上 ^ 字符或者 --not来指明你不希望提交被包含其中的分支。 因此下列3个命令是等价的： 123$ git log refA..refB$ git log ^refA refB$ git log refB --not refA 这个语法很好用，因为你可以在查询中指定超过两个的引用，这是双点语法无法实现的。 比如，你想查看所有被 refA 或 refB 包含的但是不被 refC 包含的提交，你可以输入下面中的任意一个命令 12$ git log refA refB ^refC$ git log refA refB --not refC 这就构成了一个十分强大的修订查询系统，你可以通过它来查看你的分支里包含了哪些东西。 搜索例如，如果我们想找到 ZLIB_BUF_MAX 常量是什么时候引入的，我们可以使用 -S 选项来显示新增和删除该字符串的提交。 123$ git log -SZLIB_BUF_MAX --onelinee01503b zlib: allow feeding more than 4GB in one goef49a7a zlib: zlib can only process 4GB at a time 如果我们查看这些提交的 diff，我们可以看到在 ef49a7a 这个提交引入了常量，并且在 e01503b 这个提交中被修改了。 行日志搜索行日志搜索是另一个相当高级并且有用的日志搜索功能。 这是一个最近新增的不太知名的功能，但却是十分有用。 在 git log 后加上 -L 选项即可调用，它可以展示代码中一行或者一个函数的历史。 例如，假设我们想查看 zlib.c 文件中git_deflate_bound 函数的每一次变更，我们可以执行 git log -L :git_deflate_bound:zlib.c。 Git 会尝试找出这个函数的范围，然后查找历史记录，并且显示从函数创建之后一系列变更对应的补丁。 压缩提交以下命令将HEAD调回到两次提交之前，做一次压缩提交。更多内容详见：Pro Git中的说明 1git reset --soft HEAD~2 还原提交如果移动分支指针并不适合你，Git 给你一个生成一个新提交的选项，提交将会撤消一个已存在提交的所有修改。 Git 称这个操作为 “还原”，在这个特定的场景下，你可以像这样调用它： 12$ git revert -m 1 HEAD[master b1d8379] Revert \"Merge branch 'topic'\" -m 1 标记指出 “mainline” 需要被保留下来的父结点。 当你引入一个合并到 HEAD（git merge topic），新提交有两个父结点：第一个是 HEAD（C6），第二个是将要合并入分支的最新提交（C4）。 在本例中，我们想要撤消所有由父结点 #2（C4）合并引入的修改，同时保留从父结点 #1（C4）开始的所有内容。 撤销提交如果这个不想要的合并提交只存在于你的本地仓库中，最简单且最好的解决方案是移动分支到你想要它指向的地方。 大多数情况下，如果你在错误的 git merge 后运行 git reset --hard HEAD~，这会重置分支指向。 这个方法的缺点是它会重写历史，在一个共享的仓库中这会造成问题的。 查阅 变基的风险 来了解更多可能发生的事情；用简单的话说就是如果其他人已经有你将要重写的提交，你应当避免使用 reset。 如果有任何其他提交在合并之后创建了，那么这个方法也会无效；移动引用实际上会丢失那些改动。 GitHub的配置及基本测试 ssh key的创建 1$ ssh-keygen -t rsa -C \"your_email@youremail.com\" 上传id_rsa.pub 到github配置 测试 1$ ssh -T git@github.com 正确的返回结果 123456gaoc@DataScience:/data2/ml-cousera$ ssh -T git@github.comThe authenticity of host 'github.com (52.74.223.119)' can't be established.RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added 'github.com,52.74.223.119' (RSA) to the list of known hosts.Hi ddebby! You've successfully authenticated, but GitHub does not provide shell access. 添加origin源 1$ git remote add origin git@github.com:yourName/yourRepo.git 不要直接使用https的链接地址，还需要不停的输入用户名/密码验证 TO-DO关于书中第十章Git内部原理部分，目前还没有时间研读，留作后面作业。限于本文篇幅，这部分内容将新建一篇博文，此处插入链接即可。 获取不同版本的电子书 PDF格式 Epub格式 Mobi格式 HTML在线阅读","categories":[{"name":"工具","slug":"工具","permalink":"http://blog.a-stack.com/categories/工具/"}],"tags":[{"name":"读书笔记","slug":"读书笔记","permalink":"http://blog.a-stack.com/tags/读书笔记/"},{"name":"技术","slug":"技术","permalink":"http://blog.a-stack.com/tags/技术/"},{"name":"Git","slug":"Git","permalink":"http://blog.a-stack.com/tags/Git/"}]}]}